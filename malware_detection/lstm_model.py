import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Embedding
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report


num_sequences = 1000
sequence_length = 50
vocab_size = 100 

benign_sequences = np.random.randint(1, 50, size=(500, sequence_length))
# Generate malware sequences (more "noisy" patterns)
malware_sequences = np.random.randint(30, vocab_size, size=(500, sequence_length))

X = np.vstack((benign_sequences, malware_sequences))
y = np.array([0]*500 + [1]*500)  # 0: benign, 1: malware

# 2. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Build LSTM Model
model = Sequential([
    Embedding(input_dim=vocab_size+1, output_dim=32, input_length=sequence_length),
    LSTM(64),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 4. Train
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# 5. Evaluate
y_pred_prob = model.predict(X_test)
y_pred = (y_pred_prob > 0.5).astype(int)
print(classification_report(y_test, y_pred))

